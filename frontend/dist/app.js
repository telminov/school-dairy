(function() {
  angular.module('schoolDairy', ['ngResource', 'ngSanitize', 'ngRoute', 'ngAnimate', 'ui.bootstrap', 'toaster', 'swUtils']).config(function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'src/app/controllers/main.html',
      controller: 'MainCtrl',
      label: ''
    }).when('/schedule/', {
      templateUrl: 'src/app/controllers/schedule.html',
      controller: 'ScheduleCtrl',
      label: 'Расписание'
    });
  }).run(function($location, $rootScope, swTitle) {
    $rootScope.swTitle = swTitle;
    return $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
      var baseTitle, ref;
      baseTitle = ((ref = current.$$route) != null ? ref.label : void 0) || '';
      swTitle.setTitleBase(baseTitle);
      swTitle.setTitleStart('');
      return swTitle.setTitleEnd('');
    });
  });

}).call(this);

(function() {
  angular.module('schoolDairy').constant('config', {
    serverAddress: 'http://192.168.160.10:8000'
  });

}).call(this);

(function() {
  angular.module('schoolDairy').controller('MainCtrl', function($scope, $location) {
    return $location.path('/schedule/');
  });

}).call(this);

(function() {
  angular.module('schoolDairy').controller('ScheduleCtrl', function($scope, $log, toaster, schedule, DayItem) {
    $scope.schedule = schedule;
    $scope.dayItems = DayItem.query();
    $scope.loading = true;
    return schedule.load().then(function() {
      return $scope.loading = false;
    }, function(response) {
      $scope.loading = false;
      toaster.pop('error', 'Ошибка', 'Не удалось получить расписание занятий');
      return $log.error(response);
    });
  });

}).call(this);

(function() {
  angular.module('schoolDairy').factory('DayItem', function($resource, config) {
    var url;
    url = config.serverAddress + "/day_item/:id/";
    return $resource(url);
  });

}).call(this);

(function() {
  angular.module('schoolDairy').service('schedule', function($http, config) {
    this.days = [];
    this._items = {};
    this.load = function() {
      var promise, url;
      this.days.length = 0;
      this._items = {};
      url = config.serverAddress + "/get_schedule/";
      promise = $http.get(url);
      promise.then((function(_this) {
        return function(response) {
          var day, i, item, len, ref, results;
          ref = response.data.schedule;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            day = ref[i];
            _this.days.push(day);
            results.push((function() {
              var j, len1, ref1, results1;
              ref1 = day.items;
              results1 = [];
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                item = ref1[j];
                if (!this._items[day.name]) {
                  this._items[day.name] = {};
                }
                results1.push(this._items[day.name][item.day_item.id] = item);
              }
              return results1;
            }).call(_this));
          }
          return results;
        };
      })(this));
      return promise;
    };
    this.getItem = (function(_this) {
      return function(dayName, dayItem) {
        var ref;
        return (ref = _this._items[dayName]) != null ? ref[dayItem.id] : void 0;
      };
    })(this);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb2ZmZWUiLCJjb25maWcvY29uZmlnLmNvZmZlZSIsImNvbnRyb2xsZXJzL21haW4uY29mZmVlIiwiY29udHJvbGxlcnMvc2NoZWR1bGUuY29mZmVlIiwicmVzb3VyY2VzL2RheV9pdGVtLmNvZmZlZSIsInJlc291cmNlcy9zY2hlZHVsZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxFQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsYUFBZixFQUE4QixDQUMxQixZQUQwQixFQUUxQixZQUYwQixFQUcxQixTQUgwQixFQUkxQixXQUowQixFQU0xQixjQU4wQixFQU8xQixTQVAwQixFQVMxQixTQVQwQixDQUE5QixDQVlBLENBQUMsTUFaRCxDQVlRLFNBQUMsY0FBRCxHQUFBO1dBQ0osY0FFQSxDQUFDLElBRkQsQ0FFTSxHQUZOLEVBR0U7QUFBQSxNQUFBLFdBQUEsRUFBYSwrQkFBYjtBQUFBLE1BQ0EsVUFBQSxFQUFZLFVBRFo7QUFBQSxNQUVBLEtBQUEsRUFBTyxFQUZQO0tBSEYsQ0FRQSxDQUFDLElBUkQsQ0FRTSxZQVJOLEVBU0U7QUFBQSxNQUFBLFdBQUEsRUFBYSxtQ0FBYjtBQUFBLE1BQ0EsVUFBQSxFQUFZLGNBRFo7QUFBQSxNQUVBLEtBQUEsRUFBTyxZQUZQO0tBVEYsRUFESTtFQUFBLENBWlIsQ0EyQkEsQ0FBQyxHQTNCRCxDQTJCSyxTQUFDLFNBQUQsRUFBWSxVQUFaLEVBQXdCLE9BQXhCLEdBQUE7QUFDRCxJQUFBLFVBQVUsQ0FBQyxPQUFYLEdBQXFCLE9BQXJCLENBQUE7V0FFQSxVQUFVLENBQUMsR0FBWCxDQUFlLHFCQUFmLEVBQXNDLFNBQUMsS0FBRCxFQUFRLE9BQVIsRUFBaUIsUUFBakIsR0FBQTtBQUNsQyxVQUFBLGNBQUE7QUFBQSxNQUFBLFNBQUEseUNBQTJCLENBQUUsZUFBakIsSUFBMEIsRUFBdEMsQ0FBQTtBQUFBLE1BQ0EsT0FBTyxDQUFDLFlBQVIsQ0FBcUIsU0FBckIsQ0FEQSxDQUFBO0FB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QUFWLENBQWUsR0FBZixDQUFBLENBQUE7QUFBQTs7QUFFQTtBQUFBO21CQUFBLHdDQUFBOytCQUFBO0FBQ0ksZ0JBQUEsSUFBRyxDQUFBLElBQVEsQ0FBQyxNQUFPLENBQUEsR0FBRyxDQUFDLElBQUosQ0FBbkI7QUFDSSxrQkFBQSxJQUFJLENBQUMsTUFBTyxDQUFBLEdBQUcsQ0FBQyxJQUFKLENBQVosR0FBd0IsRUFBeEIsQ0FESjtpQkFBQTtBQUFBLDhCQUVBLElBQUksQ0FBQyxNQUFPLENBQUEsR0FBRyxDQUFDLElBQUosQ0FBVSxDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBZCxDQUF0QixHQUEwQyxLQUYxQyxDQURKO0FBQUE7OzJCQUZBLENBREo7QUFBQTt5QkFESjtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBREosQ0FMQSxDQUFBO0FBZ0JBLGFBQU8sT0FBUCxDQWpCUTtJQUFBLENBSFosQ0FBQTtBQUFBLElBc0JBLElBQUksQ0FBQyxPQUFMLEdBQWUsQ0FBQSxTQUFBLEtBQUEsR0FBQTthQUFBLFNBQUMsT0FBRCxFQUFVLE9BQVYsR0FBQTtBQUNYLFlBQUEsR0FBQTtBQUFBLDBEQUE2QixDQUFBLE9BQU8sQ0FBQyxFQUFSLFVBQTdCLENBRFc7TUFBQSxFQUFBO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQXRCZixDQURpQjtFQUFBLENBRnJCLENBQUEsQ0FBQTtBQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdzY2hvb2xEYWlyeScsIFtcbiAgICAnbmdSZXNvdXJjZSdcbiAgICAnbmdTYW5pdGl6ZSdcbiAgICAnbmdSb3V0ZSdcbiAgICAnbmdBbmltYXRlJ1xuXG4gICAgJ3VpLmJvb3RzdHJhcCdcbiAgICAndG9hc3RlcidcblxuICAgICdzd1V0aWxzJ1xuXSlcblxuLmNvbmZpZyAoJHJvdXRlUHJvdmlkZXIpIC0+XG4gICAgJHJvdXRlUHJvdmlkZXJcblxuICAgIC53aGVuKCcvJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnc3JjL2FwcC9jb250cm9sbGVycy9tYWluLmh0bWwnXG4gICAgICBjb250cm9sbGVyOiAnTWFpbkN0cmwnXG4gICAgICBsYWJlbDogJydcbiAgICApXG5cbiAgICAud2hlbignL3NjaGVkdWxlLycsXG4gICAgICB0ZW1wbGF0ZVVybDogJ3NyYy9hcHAvY29udHJvbGxlcnMvc2NoZWR1bGUuaHRtbCdcbiAgICAgIGNvbnRyb2xsZXI6ICdTY2hlZHVsZUN0cmwnXG4gICAgICBsYWJlbDogJ9Cg0LDRgdC/0LjRgdCw0L3QuNC1J1xuICAgIClcblxuLnJ1biAoJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCBzd1RpdGxlKSAtPlxuICAgICRyb290U2NvcGUuc3dUaXRsZSA9IHN3VGl0bGVcblxuICAgICRyb290U2NvcGUuJG9uICckcm91dGVDaGFuZ2VTdWNjZXNzJywgKGV2ZW50LCBjdXJyZW50LCBwcmV2aW91cykgLT5cbiAgICAgICAgYmFzZVRpdGxlID0gY3VycmVudC4kJHJvdXRlPy5sYWJlbCBvciAnJ1xuICAgICAgICBzd1RpdGxlLnNldFRpdGxlQmFzZShiYXNlVGl0bGUpXG4gICAgICAgIHN3VGl0bGUuc2V0VGl0bGVTdGFydCgnJylcbiAgICAgICAgc3dUaXRsZS5zZXRUaXRsZUVuZCgnJykiLCJhbmd1bGFyLm1vZHVsZSgnc2Nob29sRGFpcnknKVxuICAgIC5jb25zdGFudCgnY29uZmlnJywge1xuICAgICAgICBzZXJ2ZXJBZGRyZXNzOiAnaHR0cDovLzE5Mi4xNjguMTYwLjEwOjgwMDAnLFxuICAgIH0pIiwiYW5ndWxhci5tb2R1bGUoJ3NjaG9vbERhaXJ5Jylcbi5jb250cm9sbGVyICdNYWluQ3RybCcsICgkc2NvcGUsICRsb2NhdGlvbikgLT5cbiAgICAkbG9jYXRpb24ucGF0aCgnL3NjaGVkdWxlLycpIiwiYW5ndWxhci5tb2R1bGUoJ3NjaG9vbERhaXJ5Jylcbi5jb250cm9sbGVyICdTY2hlZHVsZUN0cmwnLCAoJHNjb3BlLCAkbG9nLCB0b2FzdGVyLCBzY2hlZHVsZSwgRGF5SXRlbSkgLT5cbiAgICAkc2NvcGUuc2NoZWR1bGUgPSBzY2hlZHVsZVxuICAgICRzY29wZS5kYXlJdGVtcyA9IERheUl0ZW0ucXVlcnkoKVxuXG4gICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlXG4gICAgc2NoZWR1bGUubG9hZCgpLnRoZW4oXG4gICAgICAgIC0+ICRzY29wZS5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgKHJlc3BvbnNlKSAtPlxuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZVxuICAgICAgICAgICAgdG9hc3Rlci5wb3AoJ2Vycm9yJywgJ9Ce0YjQuNCx0LrQsCcsICfQndC1INGD0LTQsNC70L7RgdGMINC/0L7Qu9GD0YfQuNGC0Ywg0YDQsNGB0L/QuNGB0LDQvdC40LUg0LfQsNC90Y/RgtC40LknKVxuICAgICAgICAgICAgJGxvZy5lcnJvcihyZXNwb25zZSlcbiAgICApXG4iLCJhbmd1bGFyLm1vZHVsZSgnc2Nob29sRGFpcnknKVxuXG4uZmFjdG9yeSAnRGF5SXRlbScsICgkcmVzb3VyY2UsIGNvbmZpZykgLT5cbiAgICB1cmwgPSBcIiN7IGNvbmZpZy5zZXJ2ZXJBZGRyZXNzIH0vZGF5X2l0ZW0vOmlkL1wiXG4gICAgcmV0dXJuICRyZXNvdXJjZSh1cmwpIiwiYW5ndWxhci5tb2R1bGUoJ3NjaG9vbERhaXJ5JylcblxuLnNlcnZpY2UgJ3NjaGVkdWxlJywgKCRodHRwLCBjb25maWcpIC0+XG4gICAgdGhpcy5kYXlzID0gW11cbiAgICB0aGlzLl9pdGVtcyA9IHt9XG5cbiAgICB0aGlzLmxvYWQgPSAtPlxuICAgICAgICB0aGlzLmRheXMubGVuZ3RoID0gMFxuICAgICAgICB0aGlzLl9pdGVtcyA9IHt9XG5cbiAgICAgICAgdXJsID0gXCIjeyBjb25maWcuc2VydmVyQWRkcmVzcyB9L2dldF9zY2hlZHVsZS9cIlxuICAgICAgICBwcm9taXNlID0gJGh0dHAuZ2V0KHVybClcbiAgICAgICAgcHJvbWlzZS50aGVuKFxuICAgICAgICAgICAgKHJlc3BvbnNlKSA9PlxuICAgICAgICAgICAgICAgIGZvciBkYXkgaW4gcmVzcG9uc2UuZGF0YS5zY2hlZHVsZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRheXMucHVzaChkYXkpXG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZGF5Lml0ZW1zXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgdGhpcy5faXRlbXNbZGF5Lm5hbWVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbXNbZGF5Lm5hbWVdID0ge31cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zW2RheS5uYW1lXVtpdGVtLmRheV9pdGVtLmlkXSA9IGl0ZW1cblxuICAgICAgICApXG4gICAgICAgIHJldHVybiBwcm9taXNlXG5cbiAgICB0aGlzLmdldEl0ZW0gPSAoZGF5TmFtZSwgZGF5SXRlbSkgPT5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW2RheU5hbWVdP1tkYXlJdGVtLmlkXVxuXG4gICAgcmV0dXJuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9